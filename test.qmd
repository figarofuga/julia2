---
title: "Julia練習"
format: html
engine: julia
---

# 使用package

使用するPackageは基本は`DataFrames`や`DataFramesMeta`にします。`TidierData`は結構よくわからないバグがあるので・・・・・・。


```{julia}
using DataFrames, DataFramesMeta, Chain, CSV
```

# Basic data preparation
## read data



```{julia}

dat = DataFrame(CSV.File("rawdata/penguins_raw.csv", missingstring = ["NA"]))
dat_prep = @chain dat begin
    @rename(
      :sample_number = :"Sample Number", 
      :individual_id = :"Individual ID", 
      :clutch_completion = :"Clutch Completion", 
      :culmen_length = :"Culmen Length (mm)", 
      :culmen_depth = :"Culmen Depth (mm)", 
      :flipper_length = :"Flipper Length (mm)", 
      :body_mass = :"Body Mass (g)", 
      :delta_15_n = :"Delta 15 N (o/oo)", 
      :delta_13_c = :"Delta 13 C (o/oo)"
    )  
    @select(
      Not(:Region, :Comments)
    )
end
```


## Dataの確認

基本の他に、DataFrameの構造を見るために以下の方法があります。また、列名を全部出すために以下の方法もあります。
VSCODEを使っている場合は、Viewerがあるのでそれだけでも良いです。
```{julia}
# 最初に構造をみる
first(dat, 5)
describe(dat_prep, :eltype, :nuniqueall, :nmissing,  :min, :mean, :median, :max) |> (x -> show(x, allrows = true))

# 全DataFrameをみるため
# show(stdout, "text/plain", dat)
# how(dat, allcols=true)

# 列名の検索
show(stdout, "text/plain", names(dat))

```


## Filtering

条件にそって行を選択する方法です。
```{julia}
# 通常の方法
@subset(dat_prep, :sample_number .>= 50)
@rsubset(dat_prep, :sample_number >= 50)

dat_prep |> (x -> @rsubset(x, :sample_number >= 50))

@rsubset(dat_prep, (:sample_number >= 30) & (:body_mass >=3500))

# 文字列
@rsubset(dat_prep, :Sex == "MALE")
@rsubset(dat_prep, :Species in ("Adelie Penguin (Pygoscelis adeliae)","Gentoo penguin (Pygoscelis papua)"))

# 一部の文字列のみ使用
@rsubset(dat_prep, occursin(r"Adelie | Gentoo", :Species))
# negate
@rsubset(dat_prep, !(:Island == "Torgersen"))
@rsubset(dat_prep, !((:Island == "Torgersen") | (:Island == "Biscoe")))

# if_all

DataFrames.subset(dat_prep, 
    [:sample_number, :culmen_length] => 
    ByRow((x, y) -> all(z -> z <100, skipmissing([x, y]))))

@rsubset(dat_prep, all(z -> z < 100, skipmissing([:sample_number, :culmen_length])))


# if_any

DataFrames.subset(dat_prep, 
    [:culmen_depth, :culmen_length] => 
    ByRow((x, y) -> any(z -> z <100, skipmissing([x, y]))))

@rsubset(dat_prep, any(z -> z < 100, skipmissing([:culmen_depth, :culmen_length])))

@chain dat_prep begin
  @rsubset(any(z -> z < 100, skipmissing([:culmen_depth, :culmen_length])))
  @rsubset(all(z -> z < 100, skipmissing([:sample_number, :culmen_length])))
end

```



## Select

条件にそって列を選ぶ方法です。

```{julia}

@select(dat_prep, :Sex, :sample_number)


# 複数除外
@chain dat_prep begin
  @select($(Not(:studyName, :sample_number)))
end


# 正規表現
@select(dat_prep, Cols(r"^c"))
@select(dat_prep, Cols(r"_"))

# 数値

@chain dat_prep begin
  select(_, names(_, Int64))
end

@chain dat_prep begin
  select(_, names(_, Union{Missing, Number}))
end

# 文字列
@chain dat_prep begin
  select(_, names(_, InlineString))
end

```

## mutate
```{julia}
using Statistics

@chain dat_prep begin
# 通常の列追加
  @transform(
    :flipper_in_m = :flipper_length / 100) 
# 他の列の追加
  @transform(
    :flipper_add = :flipper_in_m + :flipper_length)
end


tmp = @chain dat_prep begin
  @select(:flipper_length, :culmen_length, :culmen_depth, :body_mass)
# if_else
  transform(_, :body_mass => ByRow((x ->
                                    ismissing(x) ? Missing :
                                    x <= 3000 ? "fat" : "thin")) => :obesity)
  @rtransform(:obesity = ismissing(:body_mass) ? missing : 
                                  (:body_mass <= 3000 ? "fat" : "thin"))
# case_when
  transform(_, [:culmen_length, :culmen_depth] => ByRow((cl, cd) ->
        # 各行の値は cl, cd
        # df.culmen_length / df.culmen_depth は列全体
        ismissing(cl) || ismissing(cd) ? missing :
        (cl < mean(skipmissing(_.culmen_length)) &&
         cd < mean(skipmissing(_.culmen_depth))) ? "small" :
        (cl >= mean(skipmissing(_.culmen_length)) &&
         cd >= mean(skipmissing(_.culmen_depth))) ? "big" :
        "medium"
    ) => :culmen_typ)
  transform(
    _,
    [:culmen_length, :culmen_depth] => ((cl_vec, cd_vec) -> begin
        # cl_vec, cd_vecは列全体(ベクトル)
        # ここで列平均を計算（事前に変数を作らず、そのまま呼ぶ）
        m_cl = mean(skipmissing(cl_vec))
        m_cd = mean(skipmissing(cd_vec))

        # mapを使って各行の値(cl, cd)に対して処理する
        map((cl, cd) ->
            ismissing(cl) || ismissing(cd) ? missing :
            (cl < m_cl && cd < m_cd)       ? "small" :
            (cl >= m_cl && cd >= m_cd)     ? "big"   :
                                             "medium"
        , cl_vec, cd_vec)
    end) => :culmen_typ
)
# 複数列に同じ操作
  transform(_, [:culmen_length, :culmen_depth] .=> (x -> x/100) .=> [:culmen_length_m, :culmen_depth_m])
# 正規表現でのacross
  transform(_, names(_, r"(length|depth)") .=> (x -> x .* 100), renamecols = false)
# 型Typeでのacross
  # mapcols(c -> eltype(c) <: Union{Missing, Number} ? (c .- mean(skipmissing(c))) ./ std(skipmissing(c)) : c, _)
  end


```

## Group_by

```{julia}
using Statistics

@chain dat_prep begin
  @groupby(:Island, :Sex) 
  @combine(
    :mean_bmi = mean(skipmissing(:body_mass)),
    :median_bmi = median(skipmissing(:body_mass)), 
    :number = $nrow
    ) 
    end

```

## Missing
```{julia}

using Statistics, GLM, Mice, Random

tmp = @chain dat_prep begin
# single value impute
  @select(:delta_15_n, :culmen_length, :Sex, :body_mass)
  end

# transform!(tmp, All() .=> (x -> replace(x, missing => mean(skipmissing(x)))) => identity)
# mapcols!(tmp) do x
#            replace(x, missing => mean(skipmissing(x)))
#        end
# transform(_, names(_, r"(length|depth)") .=> (x -> x .* 100), renamecols = false)
       
@chain tmp begin
  @transform(
    :new_delta_15 = DataFrames.coalesce.(:delta_15_n, 999)) 
# impute mean or median value
  @transform(
    :mean_delta_15 = DataFrames.coalesce.(:delta_15_n, mean(skipmissing(:delta_15_n)))
  )
  @transform @byrow @passmissing :new_culmen_length = 2 * :culmen_length
  DataFrames.dropmissing(_, [:culmen_length, :Sex])
  DataFrames.dropmissing(_)
  end

describe(tmp, :eltype, :nuniqueall, :nmissing,  :min, :mean, :median, :max) |> (x -> show(x, allrows = true))

Random.seed!(42); # Set random seed for reproducibility
mout = Mice.mice(tmp, m = 5)

analysesLMs = with(mout, data -> lm(@formula(body_mass ~ Sex + culmen_length), data))

resultsLMs = pool(analysesLMs)
```

## others

```{julia}
unique(dat_prep[!, :Sex])
dat_prep[!, [:Island, :Species]] |> unique

dat_prep[!, [:Island, :Species]] |> 
  (x->unique(x))

```

# Basic analysis

## Making description table AKA "Table 1"

```{julia}

dat2 = CSV.File("rawdata/pbcseq.csv", missingstring = "NA") |> DataFrame

dat_glm = @chain dat2 begin
    @rsubset(:status == 0 || :status == 1)
end

describe(dat_glm, :eltype, :nuniqueall, :nmissing,  :min, :mean, :median, :max) |> (x -> show(x, allrows = true))

```


```{julia}
using TableOne

descriptive_table = tableone(
           dat_glm,
           :trt,
           ["age", "sex", "ascites", "hepato", "spiders", "edema", "bili", "chol", "albumin", "platelet", "protime", "stage"];
           binvars = ["sex", "ascites", "hepato", "spiders"],
           catvars = ["edema", "stage"],
           npvars = [ "bili", "chol", "albumin", "platelet", "protime"],
           digits = 2,
           pvalues=true,
           binvardisplay = Dict("sex" => "m"),
           varnames = Dict(
               "sex" => "Male, %",
               "bili" => "Total bililubin, mg/dL",
               "albumin" => "Alb, g/dL",
               "protime" => "PT, sec"
           )
       )

descriptive_table

```

# simple GLM


```{julia}
using DataFrames, GLM, StatsBase


lm(@formula(platelet ~ protime), dat_glm)
glm1 = fit(GeneralizedLinearModel, @formula(status ~ age + sex + trt + ascites + hepato + albumin), dat_glm, Binomial())

```

```{julia}
using MixedModels


glmm1 = fit(MixedModel, @formula(status ~ age + sex + albumin + (1|stage)), dat_glm, Bernoulli())

glmm2 = fit(MixedModel, @formula(body_mass ~ Sex + Species + (1|Island) + (Species|Island)), dat_prep)


```
# simple survival analysis


```{julia}
using Survival

dat_glm.event = EventTime.(dat_glm.futime, dat_glm.status .== 1)

coxphfit = coxph(@formula(event ~ trt + age + sex + ascites + albumin + protime), dat_glm)

kmfit = fit(KaplanMeier, dat_glm.event)
km_conf =confint(kmfit)

lower = [1; [x[1] for x in km_conf]]
higher = [1; [x[2] for x in km_conf]]

ourtime = [0; kmfit.events.time]
survival_rate = [1; kmfit.survival]
n_atrisk = [nrow(dat_glm); kmfit.events.natrisk]

km_dat = DataFrame(
  ourtimes = ourtime, 
  survival_rate = survival_rate, 
  n_atrisk = n_atrisk, 
  lower = lower, 
  higher = higher
  )

function closest_subset(km_dat, set_times)
  @chain km_dat begin
    @rsubset(:ourtimes <= set_times)
    @orderby(:ourtimes)
    last(_)
  end 
end

set_times = [0, 1000, 2000, 3000, 4000, 5000]

set_rows = []
for i in set_times
  push!(set_rows, closest_subset(km_dat, i))
end

res = DataFrame(set_rows)

```


```{julia}
using CairoMakie

f = Figure()
ax1 = Axis(f[1, 1], title="Kaplan-Meier Curve", xlabel="Time", ylabel="Survival Rate", xticks=collect(0:1000:5500) ,limits = (0, 5500, 0.85, 1))
stairs!(ax1, ourtime, survival_rate; step=:post, color=:blue)
band!(ax1, ourtime ,higher, lower ; color = (:blue, 0.2))
ax2 = Axis(f[2, 1], title="Number at risk", titlealign = :left, xticks=collect(0:1000:5500), xlabel="")
hidespines!(ax2, :t, :r) # only top and right
linkxaxes!(ax1, ax2)
hideydecorations!(ax2)
text!(ax2, repeat(set_times, inner=1), ones(Int, length(set_times)), text=string.(res[:, :n_atrisk]), align = (:center, :center))
rowsize!(f.layout, 2, Relative(1/3))

f


```

# KM with two curve
```{julia}
using Survival


gkm = @chain dat_glm begin
  groupby(:sex) 
  combine(_) do sdf
    sdf.event = EventTime.(sdf.futime, sdf.status .== 1)
    kmfit = fit(KaplanMeier, sdf.event)
    return (kmfit=kmfit, subdata = sdf)
  end
end

# Kaplan-Meier推定結果を展開
expanded_dfs = []

for row in eachrow(gkm)
    km = row.kmfit
    kmconf = confint(km)
    
    # 新しい DataFrame を作成
    df = DataFrame(
        sex = row.sex,
        natrisk = vcat(nrow(row.subdata), km.events.natrisk),
        survtime = vcat(0, km.events.time),  # 0 を先頭に追加
        survival = vcat(1.0, km.survival),  # 1.0 を先頭に追加
        lower = [1; [x[1] for x in kmconf]],
        higher = [1; [x[2] for x in kmconf]]
    )
    push!(expanded_dfs, df)
end

# すべての結果を結合
df2 = vcat(expanded_dfs...)

using DataFrames, Chain

function closest_subset(km_dat, set_times, group_var)
  @chain km_dat begin
    groupby(group_var)
    combine(_) do sdf
      sdf = sdf[sdf.survtime .<= set_times, :]
      sdf = sort(sdf, :survtime)
      sdf[end, :]  # 各グループの最大 `survtime` を取得
    end
  end
end


set_times = [0, 1000, 2000, 3000, 4000, 5000]

set_rows = []
for i in set_times
    df_subset = closest_subset(df2, i, :sex)  # 各 `i` に対するデータフレームを取得
    df_subset[!, :set_time] .= i  # set_time 列を追加して、どの閾値で取得したかを示す
    push!(set_rows, df_subset)  # DataFrame のリストに追加
end

# DataFrame を結合
res = vcat(set_rows..., cols=:union)


using DataFrames

"""
    stepify(df::DataFrame)

`df` から `:survtime` を x 軸、`:survival`, `:lower`, `:higher` を y 軸として
ステッププロットに適した形に加工した新たな `DataFrame` を返す。

- `:survtime` を x 軸として扱う
- `:survival`, `:lower`, `:higher` の 3 列を y 軸としてステップ補完
"""
function stepify(df::DataFrame)
    # x, y の列を定義
    xcol = :survtime
    ycols = [:survival, :lower, :higher]

    # x でソート（既にソート済みなら不要）
    df_sorted = sort(df, xcol)
    xvals = collect(df_sorted[!, xcol])
    yvals = [collect(df_sorted[!, col]) for col in ycols]

    # 結果用の配列
    newx = Float64[]
    newy = [Float64[] for _ in ycols]

    # 最初の点をプッシュ
    push!(newx, xvals[1])
    for (i, y) in enumerate(ycols)
        push!(newy[i], yvals[i][1])
    end

    # 階段状に補完
    for i in 1:(length(xvals)-1)
        push!(newx, xvals[i+1])
        for (j, y) in enumerate(ycols)
            push!(newy[j], yvals[j][i])   # y は変化しない(横線)
        end

        push!(newx, xvals[i+1])
        for (j, y) in enumerate(ycols)
            push!(newy[j], yvals[j][i+1]) # y を次の値に
        end
    end

    # DataFrame にして返す
    return DataFrame(survtime=newx, survival=newy[1], lower=newy[2], higher=newy[3])
end



newstepify(expanded_dfs[1])

newstepify(expanded_dfs[2])

```



 ```{julia}

# make two 
using CairoMakie


f = Figure()
ax1 = Axis(f[1, 1], title="Kaplan-Meier Curve", xlabel="Time", ylabel="Survival Rate", xticks=collect(0:1000:5500) ,limits = (0, 5500, 0.5, 1))
lines!(ax1, stepify(expanded_dfs[1])[!, :survtime], stepify(expanded_dfs[1])[!, :survival];  color = :blue)
lines!(ax1, stepify(expanded_dfs[2])[!, :survtime], stepify(expanded_dfs[2])[!, :survival];  color = :red)

band!(ax1, stepify(expanded_dfs[1])[!, :survtime], stepify(expanded_dfs[1])[!, :higher], stepify(expanded_dfs[1])[!, :lower]; color = (:blue, 0.2))

band!(ax1, stepify(expanded_dfs[2])[!, :survtime], stepify(expanded_dfs[2])[!, :higher], stepify(expanded_dfs[2])[!, :lower]; color = (:red, 0.2))

# band!(ax1, expanded_dfs[2][!, :survtime] , expanded_dfs[2][!, :higher], expanded_dfs[2][!, :lower]; color = (:red, 0.2))
ax2 = Axis(f[2, 1], title="Number at risk", titlealign = :left, xticks=collect(0:1000:5500), xlabel="")
hidespines!(ax2, :t, :r) # only top and right
linkxaxes!(ax1, ax2)
hideydecorations!(ax2)
# text!(ax2, repeat(set_times, inner=2), ones(Int, length(set_times)), text=string.(res[:, :n_atrisk]), align = (:center, :center))
# rowsize!(f.layout, 2, Relative(1/3))

f

```

